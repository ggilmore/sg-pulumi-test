import { Base64 } from 'js-base64';
import * as path from 'path';

const CONFIG_FOLDER = '/home/ec2-user/.sourcegraph/config';
const DATA_FOLDER = '/home/ec2-user/.sourcegraph/data';

const CERTIFICATE_FILE_NAME = 'self-signed.crt';
const KEY_FILE_NAME = 'self-signed.key';

const CERTIFICATE_PATH = path.posix.join(CONFIG_FOLDER, CERTIFICATE_FILE_NAME);
const KEY_PATH = path.posix.join(CONFIG_FOLDER, KEY_FILE_NAME);
const NGINX_PATH = path.posix.join(CONFIG_FOLDER, 'nginx.conf');

function genCloudInit(version: string, dataDevice: string, configDevice: string): string {
	return `#cloud-config
output: {all: '| tee -a /var/log/cloud-init-output.log'}
repo_update: true
repo_upgrade: all

${setupDisks(dataDevice, configDevice)}

write_files:
- encoding: b64
  content: ${Base64.encode(nginxConf(CERTIFICATE_FILE_NAME, KEY_FILE_NAME))}
  # The only way I was able to get this to work was to copy over the file 
  # during runcmd. Maybe the folder contents are lost after the disks are mounted?
  path: /home/ec2-user/nginx.conf
  permissions: '644'

runcmd:
# Create the directory structure for Sourcegraph data
- mkdir -p ${CONFIG_FOLDER}
- mkdir -p ${DATA_FOLDER}

# Install, configure, and enable Docker
- yum update -y
- amazon-linux-extras install docker
- systemctl enable --now --no-block docker 
- sed -i -e 's/1024/10240/g' /etc/sysconfig/docker
- sed -i -e 's/4096/40960/g' /etc/sysconfig/docker
- usermod -a -G docker ec2-user

${certificateCommands(CERTIFICATE_PATH, KEY_PATH)}

# Install and run Sourcegraph. Restart the container upon subsequent reboots
# I had to modify the docker run command to stop exposing 7443. Is that outdated now?
- [ sh, -c, 'docker run -d --publish 443:7080 --publish 2633:2633 --restart unless-stopped --volume ${CONFIG_FOLDER}:/etc/sourcegraph --volume ${DATA_FOLDER}:/var/opt/sourcegraph -e "SOURCEGRAPH_EXTERNAL_URL=https://$(curl http://169.254.169.254/latest/meta-data/public-hostname)" sourcegraph/server:${version}' ]
`;
}

function setupDisks(dataDevice: string, configDevice: string): string {
	return `
# Configure disks

# Setup partitions
disk_setup:
    ${dataDevice}:
        table_type: 'mbr'
        layout: true
        overwrite: false
    ${configDevice}:
        table_type: 'mbr'
        layout: true
        overwrite: false

# Setup filesystems
fs_setup:
- device: ${dataDevice}
  filesystem: 'ext4'
  label: ${dataDevice}
  overwrite: false
  partition: 'auto'
- device: ${configDevice}
  filesystem: 'ext4'
  label: ${configDevice}
  partition: 'auto'
  overwrite: false

# Mount disks
mounts:
- [ ${dataDevice}, ${DATA_FOLDER} ]
- [ ${configDevice}, ${CONFIG_FOLDER} ]
`;
}

function certificateCommands(certificatePath: string, keyPath: string): string {
	return `
# Install mkcert
- wget https://github.com/FiloSottile/mkcert/releases/download/v1.3.0/mkcert-v1.3.0-linux-amd64 -O /usr/local/bin/mkcert
# TODO @ggilmore, figure permissions out
- chmod a+x /usr/local/bin/mkcert

# Generate self-signed cert 
- [sh, -c, 'env']
- mkdir -p /root
- cp /home/ec2-user/nginx.conf ${NGINX_PATH} 
- [sh, -c, 'HOME=/root mkcert -install']
# The 'curl' command is fetching the public DNS name for the instance. See https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html f
- [sh, -c, 'HOME=/root mkcert -cert-file ${certificatePath} -key-file ${keyPath} $(curl http://169.254.169.254/latest/meta-data/public-hostname)']
`;
}

function nginxConf(certificateFile: string, keyFile: string): string {
	return `
# This config was generated by Sourcegraph.
# You can adjust the configuration to add additional TLS or HTTP features.
# Read more at https://docs.sourcegraph.com/admin/nginx

error_log stderr;
pid /var/run/nginx.pid;

events {
}

http {
	server_tokens off;

	# We can upload large extensions
	client_max_body_size 150M;

	# Don't timeout websockets quickly. Default is 60s. This is the timeout
	# between reads/writes, not the full session timeout.
	proxy_send_timeout 1h;
	proxy_read_timeout 1h;

	access_log off;
	upstream backend {
	server localhost:8080;
	}

	server {
	listen 7080 ssl;

	# Make sure the .crt and .key files exist in the same directory as nginx.conf!
	ssl_certificate     ${certificateFile};
	ssl_certificate_key ${keyFile};

	location / {
		proxy_pass http://backend;
		proxy_set_header Host $http_host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
	}
	}
}	
`;
}

export { genCloudInit };
